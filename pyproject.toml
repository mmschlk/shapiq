[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "shapiq"
dynamic = ["version", "readme"]
description = "Shapley Interactions for Machine Learning"
requires-python = ">=3.10"
dependencies = [
    # core
    "numpy",
    "scipy",
    "pandas",
    "scikit-learn",
    "tqdm",
    "requests",
    # plotting
    "matplotlib",
    "networkx",
    "colour"
]
authors = [
    {name = "Maximilian Muschalik", email = "Maximilian.Muschalik@lmu.de"},
    {name = "Hubert Baniecki"},
    {name = "Fabian Fumagalli"},
]
maintainers = [
    {name = "Maximilian Muschalik", email = "Maximilian.Muschalik@lmu.de"},
]
license = "MIT"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    'Operating System :: Microsoft :: Windows',
    'Operating System :: Unix',
    'Operating System :: MacOS',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
]
keywords = [
    "python",
    "machine learning",
    "interpretable machine learning",
    "shap",
    "xai",
    "explainable ai",
    "interaction",
    "shapley interactions",
    "shapley values",
    "feature interaction",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["shapiq*"]

[tool.setuptools.dynamic]
version = {attr = "shapiq.__version__"}
readme = {file = ["README.md", "CHANGELOG.md"], content-type = "text/markdown"}

[project.urls]
documentation = "https://shapiq.readthedocs.io"
source = "https://github.com/mmschlk/shapiq"
tracker = "https://github.com/mmschlk/shapiq/issues"
changelog = "https://github.com/mmschlk/shapiq/blob/main/CHANGELOG.md"

[project.optional-dependencies]
ml = [
    "tabpfn",
    "torchvision",
    "torch",
    "xgboost",
    "lightgbm",
    "transformers",
    "scikit-image",
    "joblib",
    "tensorflow; python_version < '3.13'",
    "tf-keras; python_version < '3.13'",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
minversion = "8.0"

[tool.coverage.report]
directory = "tests"

[tool.ruff]
line-length = 100
target-version = "py310"
src = ["tests", "shapiq", "docs"]


[tool.ruff.lint]
# extend-safe-fixes = ["ALL"]  # Dangerous on large codebases
select = [
    "A",  # flake8-builtins: checks for shadowing builtins and related to builtins
    "W",  # pycodestyle: checks for code style guidelines
    "E",  # pycodestyle: checks for code style guidelines
    "F",  # pyflakes: checks for code style guidelines
    "I",  # isort: checks that imports are sorted correctly
    "UP",  # pyupgrade: detects code problems with regarding python versions
    "B",  # flake8-bugbear: detects code smells
    "ARG",  # unused arguments
    "INP",  # implicit-namespace-package: all packes should have an __init__.py
    "ERA",  # eradicate: there should not be any dead code (out-commented code)
    "PTH",  # pathlib: checks for pathlib usage instead of conventional os usage
    "ASYNC",  # flake8-async: checks for async usage
    "S",  # flake8-bandit: checks for code simplification
    "FAST",  # wrong usage of FastAPI
    "YTT",  # flake8-2020: misuse of sys.version or sys.version_info
    "N812",  # TODO: add further N codes
    "BLE",  # blind-except: checks for usage of blind excepts
    "COM",  # flake8-commas: checks for comma errors
    "C4",  # flake8-comprehensions: checks for better list/set/dict comprehensions
    # "CPY",  # for the time being we do not have copy-right notices in the top of the file so we do not need to include this
    "DTZ",  # flake8-datetimez: checks for datetime usage
    "T10",  # flake8-debugger: checks for usage of debugger
    "EM",  # flake8-errmsg: checks for error message handling
    "EXE", # flake8-executable: checks for executable files
    "FIX",  # flake8-fixme: checks for TODOs and FIXMEs
    "FA",  # require from __future__ import annotations import when using type hints
    #"ANN",  # TODO: add this or include mypy
    # "D",  # TODO: include this in the near future
]
ignore = [
    "E501",  # Line too long
    "N803",  # Variable X in function should be lowercase
    "N806",  # Variable X in function should be lowercase
    "S301",  # exclude pickle restriction, atm. games are unpickled this will need to be fixed
    "COM812",  # this is redundant with the formatter which anyways does this (must be excluded) in the future # TODO: add remove pickle calls and remove this exclusion
    "FIX002",  # we use TODOs atm to track potential code improvements  # TODO: add this in the future
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "docs/build",
]

# Exclude a variety of commonly ignored directories.
# Note to developers: If you add a new ignore at least put a comment next to it why it is ignored
[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "S101", # we need asserts in tests
    "D",    # test docstrings don't matter too much
    "E501", # line too long
    "ANN",  # type annotations
    "ARG",  # some functions are not used
    "INP",  # inports can be different
    "N",  # type hints are excludes in tests
    "PTH",  # we can use os for now
    "S",  # in tests we can use some security issues for now
]
"*.ipynb" = [
    "E402",  # Module level import not at top of file (its .ipynb)
    "T20",  # notebooks can have print statements
    "I002",  # notebooks do not have to import required modules
]
"docs/source/*.py" = [
    "A001",  # some conf.py variables shadow builtins which is okay here
    "INP",  # docs can be an implicit package (does not need to be imported)
    "I002",  # benchmark code does not have to import required modules
]
"benchmark/*.py" = [
    "INP", # imports can be different here
    "I002",  # benchmark code does not have to import required modules
    "PTH"  # in benchmark code we use a lot of os, which is okay
]
"docs/copy_notebooks.py" = [
    "PTH",  # the script uses os, which is not cirtical for shapiq so it's fine
    "I002",  # benchmark code does not have to import required modules
]
"__init__.py" = [
    "I002", # __init__.py does not have to import required modules
    "RUF022",  # we can have unsorted imports in __init__.py
    "FA",
]
"scripts/*.py" = [
    "INP", # imports can be different here
    "I002",  # script code does not have to import required modules
    "PTH"  # in script code we use a lot of os, which is okay
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["shapiq"]
extra-standard-library = ["typing_extensions"]
combine-as-imports = true
force-wrap-aliases = true
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]

[dependency-groups]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.1",
]
lint = [
    "ruff>=0.11.2",
    "pre-commit>=4.2.0",
]
docs = [
    "sphinx>=8.0.0",
    "furo",
    "myst-parser",
    "sphinx-copybutton",
    "sphinx-autodoc-typehints",
    "sphinx_toolbox",
    "nbconvert",
    "nbsphinx",
    "commonmark",  # Markdown parser and renderer
]
dev = [
    "build>=1.2.2.post1",
    "twine>=6.1.0",
    "notebook>=7.3.3",
    "ipywidgets",
    {include-group = "test"},
    {include-group = "lint"},
    {include-group = "docs"},
]
